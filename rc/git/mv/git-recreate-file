#!/usr/bin/env bash

# Replay all commits that affect a given file in a new git repository, effectively reconstructing that file's history
# divorced from its original repository. Example:
#
#    $ git recreate-file some/foo /path/to/new/repo path/in/new/repo
#
# Run this from the root of the "source" git repo.
#
# Args:
#
#    - relative path in "source" repo to the path to be moved
#    - path to root of "destination" repo; if directory / git repo at this location doesn't exist yet, it will be
#      created, free of charge.
#    - relative path to destination within "destination" repo to put the file at; defaults to the same relative path
#      that the file was taken from in the "source" repo.
#
# TODO: make this work for directories.
# TODO: make this work for multiple input files/directories.
# TODO: preserve commits' original metadata: timestamp, author, etc.


if [ $# -lt 2 ]; then
  echo "Usage: $0 <relative 'from' path> <path to dest repo root> [<relative 'to' path in dest repo>]" 1>&2
  exit 1
fi

f="$1"
shift
dest_git_repo="$1"
shift

if [ $# -gt 0 ]; then
  dest_path="$1"
else
  dest_path="$f"
fi

msg_file="$(tmpfile)"
patch_file="$(tmpfile)"

set -e

idx=0
while read -d $'\0' hash && read -d $'\0' filename; do
  echo "$hash:$filename"
  git log -n 1 --format="%B" $hash > "${msg_file}.$idx"
  git show $hash:"$filename" > "${patch_file}.$idx"
  echo -e "\twrote to ${msg_file}.$idx and ${patch_file}.$idx"

  let idx=$idx+1
  export idx
  echo -e "\tidx now: $idx"
done < <(git --no-pager log --format="%h" --name-only --follow -z -- "$f")

echo "Stored $idx commits"

if [ ! -e "$dest_git_repo" ]; then
  echo "Creating directory: $dest_git_repo"
  mkdir -p "$dest_git_repo"
fi

cd "$dest_git_repo" &> /dev/null

if [ ! -d ".git" ]; then
  git init
fi

if [ -e "$dest_path" ]; then
  echo "Error: $dest_path already exists in $dest_git_repo" 1>&2
  exit 1
fi
mkdir -p "$(dirname "$dest_path")"

set +e
while [ $idx -gt 0 ]; do
  let idx=$idx-1
  set -e

  mv "${patch_file}.$idx" "$dest_path"
  git add "$dest_path"

  echo "Committing with msg:"
  cat "$msg_file.$idx"
  echo ''

  set +e
  git commit -F "$msg_file.$idx"

  echo ''
done

rm -f "$msg_file"* "$patch_file"*
