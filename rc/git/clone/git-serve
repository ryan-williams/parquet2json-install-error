#!/usr/bin/env python

from argparse import ArgumentParser
from os import chdir, unlink
from os.path import exists
from shutil import rmtree
from subprocess import check_call, check_output
from sys import stderr
from tempfile import NamedTemporaryFile, TemporaryDirectory


def main():
    parser = ArgumentParser()
    parser.add_argument('-p','--port',type=int,default=7777,help='Port to serve at')
    parser.add_argument('repo',default='.',nargs='?',help='Repo to clone+serve (default: current directory)')
    parser.add_argument('-R','--no-rm',action='store_true',help="Don't remove the bare clone on exit")
    parser.add_argument('-u','--update','--hook',action='store_true',help="Set up a post-update hook to run `git update-server-info` (for serving objects that are created after server startup; not necessary for quick/one-off serves of objects already present in repo)")

    dst_group = parser.add_mutually_exclusive_group()
    dst_group.add_argument('-t','--tmpdir',action='store_true',help='Clone into a temporary directory')
    dst_group.add_argument('--tmproot', help='Directory under which to create a temporary, bare clone to serve from')
    dst_group.add_argument('-d','--dst', help='Path at which to create a bare clone to serve from')


    args = parser.parse_args()
    port = args.port
    repo = args.repo
    rm = not args.no_rm
    update = args.update

    tmpdir = args.tmpdir
    tmproot = args.tmproot
    dst = args.dst

    clone = True
    if tmproot:
        dir = TemporaryDirectory(dir=tmproot).name
    elif dst:
        dir = dst
        if exists(dir) and rm:
            stderr.write("Won't remove existing directory: %s" % dir)
            rm = False
    elif tmpdir:
        dir = TemporaryDirectory().name
    else:
        clone = False
        dir = check_output(['git','rev-parse','--git-dir']).decode().rstrip('\n')
        rm = False

    hook_path = 'hooks/post-update'
    hook_backup_path = None
    rm_hook = False
    try:
        if clone:
            check_call(['git','clone','--bare',repo,dir])
        else:
            print('Entering: %s' % dir)
        chdir(dir)
        check_call(['git','update-server-info'])
        if update:
            if exists(hook_path):
                hook_backup_path = NamedTemporaryFile(prefix='post-update', suffix='.bak', dir='hooks').name
                print('Backing up existing post-update hook: %s -> %s' % (hook_path, hook_backup_path))
                check_call(['mv', hook_path, hook_backup_path])
            else:
                rm_hook = True
            with open(hook_path,'w') as f:
                f.write('exec git update-server-info\n')
        import http.server
        import socketserver
        Handler = http.server.SimpleHTTPRequestHandler
        with socketserver.TCPServer(("", port), Handler) as httpd:
            print("serving at port", port)
            httpd.serve_forever()
    except KeyboardInterrupt:
        pass
    finally:
        if hook_backup_path:
            check_call(['mv',hook_backup_path,hook_path])
        elif rm_hook:
            unlink(hook_path)
        if rm:
            rmtree(dir)



if __name__ == '__main__':
    main()
