#!/usr/bin/env bash

# Function to get the absolute path of a file:
abspath () { case "$1" in /*)printf "%s\n" "$1";; *)printf "%s\n" "$PWD/$1";; esac; }

count() {
  echo $#
}

err() {
  echo $@ 1>&2
  exit 1
}

log() {
  echo "$(date +%Y-%m-%d-%H:%M:%S): $@"
}

mkt() {
  mktemp 2>/dev/null || mktemp -t 'githelpers.tmp.fXX'
}

mktd() {
  mktemp -d 2>/dev/null || mktemp -d -t 'githelpers.tmp.dXX'
}

# Simplify a path or paths by replacing them with the output of `pwd -P` from within them;
# optionally unroll any symlinks by passing the "-l" option.
simplify() {
  follow_links=
  if [ "$1" == "-l" ]; then
    follow_links=1
    shift
  fi
  for file in "$@"; do
    cd "$(dirname $file)"
    file="$(basename $file)"

    if [ -n "$follow_links" ]; then
      # Iterate down a (possible) chain of symlinks
      while [ -L "$file" ]; do
        file="$(readlink "$file")"
        cd "$(dirname "$file")"
        file="$(basename $file)"
      done
    fi

    # Compute the canonicalized name by finding the physical path
    # for the directory we're in and appending the target file.
    dir="$(pwd -P)"
    echo "$dir/$file"
  done
}

# Prompt a user for a y/n response until they give you a satisfactory answer.
# Usage: `prompt <prompt> <default=y>`
# Example: $ prompt "Are you sure? [Y/n] "
# Example:
#
#   if [ $(prompt "Are you sure? [Y/n] ") ]; then
#       echo "they're sure"
#   else
#       echo "they're just not sure"
#   fi
prompt() {
  while true; do
      echo -en "$1" 1>&2
      read line
      if [ "$line" == "" ]; then
          if [ "$2" == "" ]; then
              line="y"
          else
              line=$2
          fi
      fi
      if [ "$line" == "n" -o "$line" == "N" ]; then
          return 1
      fi

      if [ "$line" == "y" -o "$line" == "Y" ]; then
          return 0
      fi

      echo "Invalid response"
  done
}
