#!/usr/bin/env bash

# Run two versions (provided as git refs in positions $3 and $4) of a file ($2) through a shell command ($1)
#
# Examples:
#
# $ git-diff-pipe sort my_file.txt HEAD^ HEAD
# $ git-diff-pipe "awk -F, '{ print $1 }' | sort" my_file.txt origin/master master
#
# The "$cmd" ($1) should be in a format that can be passed to `parallel`; the output of `git show` on each commit's
# version of the file ($2) will be piped to "$cmd".
#
# This script requires GNU Parallel (https://www.gnu.org/software/parallel/).

# Helper that takes a command ($1), runs it on two files ($2, $3), and diffs the output.
diff_apply() {
  cmd="$1"; shift
  f1="$1"; shift
  f2="$1"; shift

  t1="$(mktemp)"
  t2="$(mktemp)"
  finish() {
    rm -f "$t1" "$t2"
  }
  trap finish EXIT

  echo "$f1" | parallel --env PATH "$cmd" > "$t1"
  echo "$f2" | parallel --env PATH "$cmd" > "$t2"
  diff "$t1" "$t2"
}

cmd="$1"
shift

file="$1"
shift

if [ "$(git relpath "$(git root)")" != "."  ]; then
  file="$(git relpath "$file")"
fi

from="${1:-HEAD^}"
shift

to="${1:-HEAD}"
shift

args=( )
while IFS= read -r -d ''; do
  args+=( "$REPLY" )
done < <(xargs printf '%s\0' <<<"$cmd")

diff_apply "git show {}:$file | $cmd" "$from" "$to"

